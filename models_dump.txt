# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class MarketplaceBuyer(models.Model):
    phone_number = models.CharField(max_length=15)
    location = models.CharField(max_length=100)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.OneToOneField(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'marketplace_buyer'


class MarketplaceFarmer(models.Model):
    phone_number = models.CharField(max_length=15)
    location = models.CharField(max_length=100)
    rating = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    total_ratings = models.PositiveIntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.OneToOneField(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'marketplace_farmer'


class MarketplaceOrder(models.Model):
    quantity = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    unit_price = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    platform_fee = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    total_amount = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    status = models.CharField(max_length=10)
    delivery_location = models.CharField(max_length=100)
    delivery_notes = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    buyer = models.ForeignKey(MarketplaceBuyer, models.DO_NOTHING)
    produce = models.ForeignKey('MarketplaceProduce', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'marketplace_order'


class MarketplaceProduce(models.Model):
    title = models.CharField(max_length=100)
    description = models.TextField()
    quantity = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    unit = models.CharField(max_length=4)
    price_per_unit = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    location = models.CharField(max_length=100)
    is_available = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    farmer = models.ForeignKey(MarketplaceFarmer, models.DO_NOTHING)
    category = models.ForeignKey('MarketplaceProducecategory', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'marketplace_produce'


class MarketplaceProducecategory(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    class Meta:
        managed = False
        db_table = 'marketplace_producecategory'


class MarketplaceRating(models.Model):
    score = models.PositiveSmallIntegerField()
    comment = models.TextField()
    created_at = models.DateTimeField()
    buyer = models.ForeignKey(MarketplaceBuyer, models.DO_NOTHING)
    farmer = models.ForeignKey(MarketplaceFarmer, models.DO_NOTHING)
    order = models.OneToOneField(MarketplaceOrder, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'marketplace_rating'


class SmsServicePriceupdate(models.Model):
    location = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    unit = models.CharField(max_length=10)
    source = models.CharField(max_length=100)
    created_at = models.DateTimeField()
    is_sent = models.BooleanField()
    sent_at = models.DateTimeField(blank=True, null=True)
    produce_category = models.ForeignKey(MarketplaceProducecategory, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'sms_service_priceupdate'


class SmsServiceSmsmessage(models.Model):
    recipient_number = models.CharField(max_length=15)
    message_content = models.TextField()
    message_type = models.CharField(max_length=10)
    sent_at = models.DateTimeField()
    status = models.CharField(max_length=20)
    twilio_sid = models.CharField(max_length=50, blank=True, null=True)
    buyer = models.ForeignKey(MarketplaceBuyer, models.DO_NOTHING, blank=True, null=True)
    farmer = models.ForeignKey(MarketplaceFarmer, models.DO_NOTHING, blank=True, null=True)
    related_order = models.ForeignKey(MarketplaceOrder, models.DO_NOTHING, blank=True, null=True)
    related_produce = models.ForeignKey(MarketplaceProduce, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sms_service_smsmessage'


class SmsServiceSmssubscription(models.Model):
    subscription_type = models.CharField(max_length=10)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    buyer = models.ForeignKey(MarketplaceBuyer, models.DO_NOTHING, blank=True, null=True)
    farmer = models.ForeignKey(MarketplaceFarmer, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sms_service_smssubscription'
        unique_together = (('farmer', 'subscription_type'), ('buyer', 'subscription_type'),)


class SmsServiceSmstemplate(models.Model):
    name = models.CharField(unique=True, max_length=50)
    template_text = models.TextField()
    description = models.TextField()
    message_type = models.CharField(max_length=10)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'sms_service_smstemplate'


class SmsServiceWeatheralert(models.Model):
    location = models.CharField(max_length=100)
    alert_type = models.CharField(max_length=50)
    description = models.TextField()
    severity = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    is_sent = models.BooleanField()
    sent_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sms_service_weatheralert'
